unit JSON.CustomerList;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2019-05-22 22:07:06
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses
    Generics.Collections
  , Rest.Json
  , REST.JSON.Types
  ;

type

  TPrimaryEmailAddrClass = class
  private
    FAddress: String;
  public
    property Address: String read FAddress write FAddress;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TPrimaryEmailAddrClass;
  end;

  TMetaDataClass = class
  private
    FCreateTime: String;
    FLastUpdatedTime: String;
  public
    property CreateTime: String read FCreateTime write FCreateTime;
    property LastUpdatedTime: String read FLastUpdatedTime write FLastUpdatedTime;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TMetaDataClass;
  end;

  TCurrencyRefClass = class
  private
    FName: String;
    FValue: String;
  public
    property name: String read FName write FName;
    property value: String read FValue write FValue;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TCurrencyRefClass;
  end;

  TCustomerClass = class
  private
    FActive: Boolean;
    FBalance: Extended;
    FBalanceWithJobs: Extended;
    FBillWithParent: Boolean;
    FCurrencyRef: TCurrencyRefClass;
    FDisplayName: String;
    FFullyQualifiedName: String;
    FId: String;
    FIsProject: Boolean;
    FJob: Boolean;
    FMetaData: TMetaDataClass;
    FPreferredDeliveryMethod: String;
    FPrimaryEmailAddr: TPrimaryEmailAddrClass;
    FPrintOnCheckName: String;
    FSyncToken: String;
    FTaxable: Boolean;
    FDomain: String;
    FSparse: Boolean;
  public
    property Active: Boolean read FActive write FActive;
    property Balance: Extended read FBalance write FBalance;
    property BalanceWithJobs: Extended read FBalanceWithJobs write FBalanceWithJobs;
    property BillWithParent: Boolean read FBillWithParent write FBillWithParent;
    property CurrencyRef: TCurrencyRefClass read FCurrencyRef write FCurrencyRef;
    property DisplayName: String read FDisplayName write FDisplayName;
    property FullyQualifiedName: String read FFullyQualifiedName write FFullyQualifiedName;
    property Id: String read FId write FId;
    property IsProject: Boolean read FIsProject write FIsProject;
    property Job: Boolean read FJob write FJob;
    property MetaData: TMetaDataClass read FMetaData write FMetaData;
    property PreferredDeliveryMethod: String read FPreferredDeliveryMethod write FPreferredDeliveryMethod;
    property PrimaryEmailAddr: TPrimaryEmailAddrClass read FPrimaryEmailAddr write FPrimaryEmailAddr;
    property PrintOnCheckName: String read FPrintOnCheckName write FPrintOnCheckName;
    property SyncToken: String read FSyncToken write FSyncToken;
    property Taxable: Boolean read FTaxable write FTaxable;
    property domain: String read FDomain write FDomain;
    property sparse: Boolean read FSparse write FSparse;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TCustomerClass;
  end;

  TQueryResponseClass = class
  private
    FCustomer: TArray<TCustomerClass>;
    FMaxResults: Extended;
    FStartPosition: Extended;
  public
    property Customer: TArray<TCustomerClass> read FCustomer write FCustomer;
    property maxResults: Extended read FMaxResults write FMaxResults;
    property startPosition: Extended read FStartPosition write FStartPosition;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TQueryResponseClass;
  end;

  TCustomerListClass = class
  private
    FQueryResponse: TQueryResponseClass;
    FTime: String;
  public
    property QueryResponse: TQueryResponseClass read FQueryResponse write FQueryResponse;
    property time: String read FTime write FTime;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TCustomerListClass;
  end;

implementation

{TPrimaryEmailAddrClass}


function TPrimaryEmailAddrClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPrimaryEmailAddrClass.FromJsonString(AJsonString: string): TPrimaryEmailAddrClass;
begin
  result := TJson.JsonToObject<TPrimaryEmailAddrClass>(AJsonString)
end;

{TMetaDataClass}


function TMetaDataClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMetaDataClass.FromJsonString(AJsonString: string): TMetaDataClass;
begin
  result := TJson.JsonToObject<TMetaDataClass>(AJsonString)
end;

{TCurrencyRefClass}


function TCurrencyRefClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCurrencyRefClass.FromJsonString(AJsonString: string): TCurrencyRefClass;
begin
  result := TJson.JsonToObject<TCurrencyRefClass>(AJsonString)
end;

{TCustomerClass}

constructor TCustomerClass.Create;
begin
  inherited;
  FCurrencyRef := TCurrencyRefClass.Create();
  FMetaData := TMetaDataClass.Create();
  FPrimaryEmailAddr := TPrimaryEmailAddrClass.Create();
end;

destructor TCustomerClass.Destroy;
begin
  FCurrencyRef.free;
  FMetaData.free;
  FPrimaryEmailAddr.free;
  inherited;
end;

function TCustomerClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCustomerClass.FromJsonString(AJsonString: string): TCustomerClass;
begin
  result := TJson.JsonToObject<TCustomerClass>(AJsonString)
end;

{TQueryResponseClass}

destructor TQueryResponseClass.Destroy;
var
  LCustomerItem: TCustomerClass;
begin

 for LCustomerItem in FCustomer do
   LCustomerItem.free;

  inherited;
end;

function TQueryResponseClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TQueryResponseClass.FromJsonString(AJsonString: string): TQueryResponseClass;
begin
  result := TJson.JsonToObject<TQueryResponseClass>(AJsonString)
end;

{TRootClass}

constructor TCustomerListClass.Create;
begin
  inherited;
  FQueryResponse := TQueryResponseClass.Create();
end;

destructor TCustomerListClass.Destroy;
begin
  FQueryResponse.free;
  inherited;
end;

function TCustomerListClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCustomerListClass.FromJsonString(AJsonString: string): TCustomerListClass;
begin
  result := TJson.JsonToObject<TCustomerListClass>(AJsonString)
end;

end.

