unit JSON.VendorList;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2019-05-22 19:53:00
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses
    Generics.Collections
  , Rest.Json
  , REST.JSON.Types
  ;

type

  TMetaDataClass = class
  private
    FCreateTime: String;
    FLastUpdatedTime: String;
  public
    property CreateTime: String read FCreateTime write FCreateTime;
    property LastUpdatedTime: String read FLastUpdatedTime write FLastUpdatedTime;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TMetaDataClass;
  end;

  TVendorClass = class
  private
    FActive: Boolean;
    FBalance: Extended;
    FDisplayName: String;
    FId: String;
    FMetaData: TMetaDataClass;
    FPrintOnCheckName: String;
    FSyncToken: String;
    FVendor1099: Boolean;
    FDomain: String;
    FSparse: Boolean;
  public
    property Active: Boolean read FActive write FActive;
    property Balance: Extended read FBalance write FBalance;
    property DisplayName: String read FDisplayName write FDisplayName;
    property Id: String read FId write FId;
    property MetaData: TMetaDataClass read FMetaData write FMetaData;
    property PrintOnCheckName: String read FPrintOnCheckName write FPrintOnCheckName;
    property SyncToken: String read FSyncToken write FSyncToken;
    property Vendor1099: Boolean read FVendor1099 write FVendor1099;
    property domain: String read FDomain write FDomain;
    property sparse: Boolean read FSparse write FSparse;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TVendorClass;
  end;

  TQueryResponseClass = class
  private
    FVendor: TArray<TVendorClass>;
    FMaxResults: Extended;
    FStartPosition: Extended;
  public
    property Vendor: TArray<TVendorClass> read FVendor write FVendor;
    property maxResults: Extended read FMaxResults write FMaxResults;
    property startPosition: Extended read FStartPosition write FStartPosition;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TQueryResponseClass;
  end;

  TJSONVendorListClass = class
  private
    FQueryResponse: TQueryResponseClass;
    FTime: String;
  public
    property QueryResponse: TQueryResponseClass read FQueryResponse write FQueryResponse;
    property time: String read FTime write FTime;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TJSONVendorListClass;
  end;

implementation

{TMetaDataClass}


function TMetaDataClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMetaDataClass.FromJsonString(AJsonString: string): TMetaDataClass;
begin
  result := TJson.JsonToObject<TMetaDataClass>(AJsonString)
end;

{TVendorClass}

constructor TVendorClass.Create;
begin
  inherited;
  FMetaData := TMetaDataClass.Create;
end;

destructor TVendorClass.Destroy;
begin
  FMetaData.free;
  inherited;
end;

function TVendorClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TVendorClass.FromJsonString(AJsonString: string): TVendorClass;
begin
  result := TJson.JsonToObject<TVendorClass>(AJsonString)
end;

{TQueryResponseClass}

destructor TQueryResponseClass.Destroy;
var
  LVendorItem: TVendorClass;
begin

 for LVendorItem in FVendor do
   LVendorItem.free;

  inherited;
end;

function TQueryResponseClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TQueryResponseClass.FromJsonString(AJsonString: string): TQueryResponseClass;
begin
  result := TJson.JsonToObject<TQueryResponseClass>(AJsonString)
end;

{TRootClass}

constructor TJSONVendorListClass.Create;
begin
  inherited;
  FQueryResponse := TQueryResponseClass.Create;
end;

destructor TJSONVendorListClass.Destroy;
begin
  FQueryResponse.free;
  inherited;
end;

function TJSONVendorListClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TJSONVendorListClass.FromJsonString(AJsonString: string): TJSONVendorListClass;
begin
  result := TJson.JsonToObject<TJSONVendorListClass>(AJsonString)
end;

end.

