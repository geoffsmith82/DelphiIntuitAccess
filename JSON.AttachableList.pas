unit JSON.AttachableList;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2019-05-22 20:21:59
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses
    Generics.Collections
  , Rest.Json
  , REST.JSON.Types
  ;

type

  TEntityRefClass = class
  private
    FType: String;
    FValue: String;
  public
    property &type: String read FType write FType;
    property value: String read FValue write FValue;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TEntityRefClass;
  end;

  TAttachableRefClass = class
  private
    [JSONName('EntityRef')]
    FEntityRef: TEntityRefClass;
    [JSONName('IncludeOnSend')]
    FIncludeOnSend: Boolean;
  public
    property EntityRef: TEntityRefClass read FEntityRef write FEntityRef;
    property IncludeOnSend: Boolean read FIncludeOnSend write FIncludeOnSend;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TAttachableRefClass;
  end;

  TMetaDataClass = class
  private
    FCreateTime: String;
    FLastUpdatedTime: String;
  public
    property CreateTime: String read FCreateTime write FCreateTime;
    property LastUpdatedTime: String read FLastUpdatedTime write FLastUpdatedTime;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TMetaDataClass;
  end;

  TAttachableClass = class
  private
    [JSONName('AttachableRef')]
    FAttachableRef: TArray<TAttachableRefClass>;
    [JSONName('ContentType')]
    FContentType: String;
    [JSONName('FileAccessUri')]
    FFileAccessUri: String;
    [JSONName('FileName')]
    FFileName: String;
    [JSONName('Id')]
    FId: String;
    [JSONName('MetaData')]
    FMetaData: TMetaDataClass;
    [JSONName('Size')]
    FSize: Extended;
    [JSONName('SyncToken')]
    FSyncToken: String;
    [JSONName('TempDownloadUri')]
    FTempDownloadUri: String;
    FDomain: String;
    FSparse: Boolean;
  public
    property AttachableRef: TArray<TAttachableRefClass> read FAttachableRef write FAttachableRef;
    property ContentType: String read FContentType write FContentType;
    property FileAccessUri: String read FFileAccessUri write FFileAccessUri;
    property FileName: String read FFileName write FFileName;
    property Id: String read FId write FId;
    property MetaData: TMetaDataClass read FMetaData write FMetaData;
    property Size: Extended read FSize write FSize;
    property SyncToken: String read FSyncToken write FSyncToken;
    property TempDownloadUri: String read FTempDownloadUri write FTempDownloadUri;
    property domain: String read FDomain write FDomain;
    property sparse: Boolean read FSparse write FSparse;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TAttachableClass;
  end;

  TQueryResponseClass = class
  private
    FAttachable: TArray<TAttachableClass>;
    FMaxResults: Extended;
    FStartPosition: Extended;
  public
    property Attachable: TArray<TAttachableClass> read FAttachable write FAttachable;
    property maxResults: Extended read FMaxResults write FMaxResults;
    property startPosition: Extended read FStartPosition write FStartPosition;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TQueryResponseClass;
  end;

  TJSONAttachableListClass = class
  private
    FQueryResponse: TQueryResponseClass;
    FTime: String;
  public
    property QueryResponse: TQueryResponseClass read FQueryResponse write FQueryResponse;
    property time: String read FTime write FTime;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TJSONAttachableListClass;
  end;

implementation

{TEntityRefClass}


function TEntityRefClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TEntityRefClass.FromJsonString(AJsonString: string): TEntityRefClass;
begin
  result := TJson.JsonToObject<TEntityRefClass>(AJsonString)
end;

{TAttachableRefClass}

constructor TAttachableRefClass.Create;
begin
  inherited;
  FEntityRef := TEntityRefClass.Create();
end;

destructor TAttachableRefClass.Destroy;
begin
  FEntityRef.free;
  inherited;
end;

function TAttachableRefClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAttachableRefClass.FromJsonString(AJsonString: string): TAttachableRefClass;
begin
  result := TJson.JsonToObject<TAttachableRefClass>(AJsonString)
end;

{TMetaDataClass}


function TMetaDataClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMetaDataClass.FromJsonString(AJsonString: string): TMetaDataClass;
begin
  result := TJson.JsonToObject<TMetaDataClass>(AJsonString)
end;

{TAttachableClass}

constructor TAttachableClass.Create;
begin
  inherited;
  FMetaData := TMetaDataClass.Create();
end;

destructor TAttachableClass.Destroy;
var
  LAttachableRefItem: TAttachableRefClass;
begin

 for LAttachableRefItem in FAttachableRef do
   LAttachableRefItem.free;

  FMetaData.free;
  inherited;
end;

function TAttachableClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAttachableClass.FromJsonString(AJsonString: string): TAttachableClass;
begin
  result := TJson.JsonToObject<TAttachableClass>(AJsonString)
end;

{TQueryResponseClass}

destructor TQueryResponseClass.Destroy;
var
  LAttachableItem: TAttachableClass;
begin

 for LAttachableItem in FAttachable do
   LAttachableItem.free;

  inherited;
end;

function TQueryResponseClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TQueryResponseClass.FromJsonString(AJsonString: string): TQueryResponseClass;
begin
  result := TJson.JsonToObject<TQueryResponseClass>(AJsonString)
end;

{TRootClass}

constructor TJSONAttachableListClass.Create;
begin
  inherited;
  FQueryResponse := TQueryResponseClass.Create();
end;

destructor TJSONAttachableListClass.Destroy;
begin
  FQueryResponse.free;
  inherited;
end;

function TJSONAttachableListClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TJSONAttachableListClass.FromJsonString(AJsonString: string): TJSONAttachableListClass;
begin
  result := TJson.JsonToObject<TJSONAttachableListClass>(AJsonString)
end;

end.

